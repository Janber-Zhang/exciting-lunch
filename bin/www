#!/usr/bin/env node

/**
 * Module dependencies.
 */
 require( "console-stamp" )( console, { pattern : "yyyy-mm-dd HH:MM:ss.l" } );
 var IO = require('socket.io');
 var app = require('../app');
 var debug = require('debug')('myapp:server');
 var http = require('http');
 var configPort = require('../config/config.json').port;

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(configPort ||process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Create Socket server.
 */
 
var socketIO = IO(server);
// 房间用户名单
var roomInfo = {};

// 已点菜单
var selected_item = [];

socketIO.on('connection', function (socket) {
  var roomID = 'excited_room';   // 设置房间ID
  var user = '';

  socket.on('join', function (userObj) {
    user = JSON.parse(userObj);

    // 将用户昵称加入房间名单中
    if (!roomInfo[roomID]) {
      roomInfo[roomID] = [];
    };
    var should_join = true;
    roomInfo[roomID].forEach(function(_user){
      if (_user.nickname == user.nickname && _user._id == user._id) {
        should_join = false;
      }
    });
    // 加入房间
    socket.join(roomID);
    if (should_join) {
      roomInfo[roomID].push(user);
      // 通知房间内人员
    }
    socketIO.to(roomID).emit('sys',user.nickname + '加入了房间', roomInfo[roomID], user, 'in');  
    // 用户点餐
    socketIO.to(roomID).emit('orders', selected_item)

  });

  socket.on('leave', function () {
    socket.emit('disconnect');
  });

  socket.on('disconnect', function () {
    // 从房间名单中移除
    var index = roomInfo[roomID].indexOf(user);
    if (index !== -1) {
      roomInfo[roomID].splice(index, 1);
    }

    socket.leave(roomID);    // 退出房间
    socketIO.to(roomID).emit('sys', user.nickname + '退出了房间', roomInfo[roomID], user, 'out');
  });

  // 接收用户消息,发送相应的房间
  socket.on('message', function (msg) {
    // 验证如果用户不在房间内则不给发送
    if (roomInfo[roomID].indexOf(user) === -1) {  
      return false;
    }
    socketIO.to(roomID).emit('msg', user, msg);
  });

  // 用户点餐
  socket.on('order', function (item) {
    var itemObj = JSON.parse(item);
    var is_selected = false;
    selected_item.forEach(function(_item){
      if (itemObj.name == _item.name) {
        is_selected = true
      }
    })
    if (!is_selected) {
      selected_item.push(itemObj);
    }
    // 用户点餐
    socketIO.to(roomID).emit('orders', selected_item)
  })

  // 用户点餐取消
  socket.on('deleteorder', function (item) {
    var itemObj = JSON.parse(item);
    selected_item = selected_item.filter(function(item){
      return item.name !== itemObj.name
    })
    // 用户点餐
    socketIO.to(roomID).emit('orders', selected_item)
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
